diff --git a/.dir-locals.el b/.dir-locals.el
deleted file mode 100644
index da72247..0000000
--- a/.dir-locals.el
+++ /dev/null
@@ -1,4 +0,0 @@
-((c-mode
-  (indent-tabs-mode . nil)
-  (c-file-style . "bsd")
-  (c-basic-offset . 2)))
diff --git a/.editorconfig b/.editorconfig
deleted file mode 100644
index c47611e..0000000
--- a/.editorconfig
+++ /dev/null
@@ -1,22 +0,0 @@
-; https://editorconfig.org
-
-root = true
-
-[*]
-end_of_line = lf
-insert_final_newline = true
-indent_style = space
-indent_size = 4
-
-[*.{c,h}]
-indent_size = 2
-
-[*.S]
-indent_size = 8
-
-[*.ld]
-indent_size = 2
-
-[Makefile]
-indent_style = tab
-indent_size = 8
diff --git a/.gdbinit.tmpl-riscv b/.gdbinit.tmpl-riscv
deleted file mode 100644
index a2bfde3..0000000
--- a/.gdbinit.tmpl-riscv
+++ /dev/null
@@ -1,6 +0,0 @@
-set confirm off
-set architecture riscv:rv64
-target remote 127.0.0.1:1234
-symbol-file kernel/kernel
-set disassemble-next-line auto
-set riscv use-compressed-breakpoints yes
diff --git a/Makefile b/Makefile
index 39a99d7..10fb268 100644
--- a/Makefile
+++ b/Makefile
@@ -128,6 +128,7 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_testcow\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..143f452 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,8 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            inc_ref(void *);
+void            dec_ref(void *);
 
 // log.c
 void            initlog(int, struct superblock*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..56655ed 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -14,6 +14,8 @@ void freerange(void *pa_start, void *pa_end);
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
+int ref_count[PHY_PAGES];
+
 struct run {
   struct run *next;
 };
@@ -26,6 +28,12 @@ struct {
 void
 kinit()
 {
+  // Initialize ref_count to 1 for all pages
+  // 1 because it will be made 0 while calling freerange
+  for (int i = 0; i < PHY_PAGES; i++) {
+    ref_count[i] = 1;
+  }
+
   initlock(&kmem.lock, "kmem");
   freerange(end, (void*)PHYSTOP);
 }
@@ -39,6 +47,8 @@ freerange(void *pa_start, void *pa_end)
     kfree(p);
 }
 
+// decrement the reference count of the physical address pa
+// if the reference count becomes 0,
 // Free the page of physical memory pointed at by pa,
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
@@ -46,6 +56,11 @@ freerange(void *pa_start, void *pa_end)
 void
 kfree(void *pa)
 {
+  // if the reference count becomes 0, free the page
+  dec_ref(pa);
+  if (ref_count[PGNUM(pa)])
+    return;
+
   struct run *r;
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
@@ -78,5 +93,30 @@ kalloc(void)
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
+  
+  // increment the reference count of the physical address
+  inc_ref((void*)r);
+
   return (void*)r;
 }
+
+// Increment the reference count of the physical address pa
+void
+inc_ref(void* pa)
+{
+  ref_count[PGNUM(pa)]++;
+}
+
+// Decrement the reference count of the physical address pa
+// free the page if the reference count is 0
+void
+dec_ref(void* pa)
+{
+  int index = PGNUM(pa);
+  if (ref_count[index] <= 0) {
+    panic("dec_ref(): ref_count[pa] <= 0");
+  }
+
+  ref_count[index]--;
+  // printf("dec_ref(): ref_count[%d] = %d\n", index, ref_count[index]);
+}
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 776f98c..59bbbf8 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -65,3 +65,5 @@
 //   TRAPFRAME (p->trapframe, used by the trampoline)
 //   TRAMPOLINE (the same page as in the kernel)
 #define TRAPFRAME (TRAMPOLINE - PGSIZE)
+
+#define PHY_PAGES (PHYSTOP / PGSIZE)    // total number of physical pages
\ No newline at end of file
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..59980ba 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -344,6 +344,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
 
+#define PTE_COW (1L << 7) // copy-on-write
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
@@ -351,6 +353,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 
 #define PTE_FLAGS(pte) ((pte) & 0x3FF)
 
+#define PGNUM(pa) (((uint64)(pa)) >> PGSHIFT)
+
 // extract the three 9-bit page table indices from a virtual address.
 #define PXMASK          0x1FF // 9 bits
 #define PXSHIFT(level)  (PGSHIFT+(9*(level)))
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..592e5b7 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -9,7 +9,7 @@
 struct spinlock tickslock;
 uint ticks;
 
-extern char trampoline[], uservec[], userret[];
+extern char trampoline[], uservec[], userret[], end[];
 
 // in kernelvec.S, calls kerneltrap().
 void kernelvec();
@@ -65,6 +65,53 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if (r_scause() == 15) {
+    // create a new physical page for copy on write
+    pte_t *pte;
+    uint64 va = PGROUNDDOWN(r_stval());
+
+    if (va >= MAXVA) {
+      setkilled(p);
+      goto err;
+    }
+
+    if ((pte = walk(p->pagetable, va, 0)) == 0) { 
+      printf("usertrap(): pte should exist");
+      setkilled(p);
+      goto err;
+    }
+
+    if ((*pte & PTE_COW) && (*pte & PTE_V) && (*pte & PTE_U)) {
+      uint flags = PTE_FLAGS(*pte);
+      char *mem;
+
+      // change the flags to writeable and not copy on write
+      flags &= (~PTE_COW);
+      flags |= PTE_W;
+
+      // allocate a new page
+      if ((mem = kalloc()) == 0) {
+        printf("usertrap(): kalloc() failed on copy on write");
+        setkilled(p);
+        goto err;
+      }
+
+      uint64 pa = PTE2PA(*pte);
+
+      memmove(mem, (char *)pa, PGSIZE);
+
+      // unmap the old page and decrement the reference count
+      uvmunmap(p->pagetable, va, 1, 0);
+      dec_ref((void*)pa);
+      
+      // allocate a new page with the new flags
+      if (mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0) {
+        printf("usertrap(): mappages() failed on copy on write");
+        setkilled(p);
+      }
+      // printf("new page allocated for copy on write\n");
+    }
+    
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
@@ -72,7 +119,7 @@ usertrap(void)
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
   }
-
+ err:
   if(killed(p))
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..5cfdc2d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,27 +308,42 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+
+    // taking the physical address from the parent's page table
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+
+    // clear the write flag
+    flags &= ~PTE_W;
+
+    // mark it as a copy-on-write page
+    flags |= PTE_COW;
+
+    // map the same physical page at a new virtual address for child
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0)
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+
+    // as a new virtual page is mapped to the physical page,
+    // increase the reference count of the physical page.
+    inc_ref((void*)pa);
+
+    // change the parent page table entry flags to
+    // mark it as a copy-on-write page.
+    uvmunmap(old, i, 1, 0);
+    if (mappages(old, i, PGSIZE, (uint64)pa, flags) != 0)
       goto err;
-    }
   }
   return 0;
 
  err:
-  uvmunmap(new, 0, i / PGSIZE, 1);
+  uvmunmap(new, i, i / PGSIZE, 1);
   return -1;
 }
 
@@ -353,14 +368,50 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
 
+  pte_t *pte;
+  char *mem;
+
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if (va0 >= MAXVA)
+      return -1;
+
+    if ((pte = walk(pagetable, va0, 0)) == 0)
+      return -1;
+
+    if ((*pte & PTE_V) == 0 || (*pte & PTE_U) == 0)
+      return -1;
+
+    if (*pte & PTE_COW)
+    {
+      uint flags = PTE_FLAGS(*pte);
+      
+      flags &= (~PTE_COW);
+      flags |= PTE_W;
+
+      if ((mem = kalloc()) == 0)
+      {
+        return -1;
+      }
+
+      pa0 = PTE2PA(*pte);
+      memmove(mem, (char *)pa0, PGSIZE);
+
+      uvmunmap(pagetable, va0, 1, 0);
+      kfree((void *)pa0);
+
+      if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0)
+        panic("copyout\n");
+    }
+
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
+
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
+      
     memmove((void *)(pa0 + (dstva - va0)), src, n);
 
     len -= n;
