diff --git a/Makefile b/Makefile
index 39a99d7..4c038a7 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o\
+	$K/rand.o\
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -128,6 +129,8 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_testprocinfo\
+	$U/_testticket\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..33c4412 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -4,6 +4,7 @@ struct file;
 struct inode;
 struct pipe;
 struct proc;
+struct pstat;
 struct spinlock;
 struct sleeplock;
 struct stat;
@@ -54,6 +55,10 @@ void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, int, uint64, uint, uint);
 void            itrunc(struct inode*);
 
+// rand.c
+void            srand(unsigned int);
+uint64          rand(uint64);
+
 // ramdisk.c
 void            ramdiskinit(void);
 void            ramdiskintr(void);
@@ -106,6 +111,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);
+int             getpinfo(uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..ce7ace7 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -124,6 +125,8 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  // initialize tickets to 1
+  proc->tickets_current = proc->tickets_max = 1;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -320,6 +323,12 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  
+  // allocate tickets to child process
+  acquire(&p->lock);
+  np->tickets_max = np->tickets_current = p->tickets_max;
+  np->time_slices = 0;
+  release(&p->lock);
   release(&np->lock);
 
   return pid;
@@ -434,6 +443,36 @@ wait(uint64 addr)
   }
 }
 
+uint64
+ticket_total_count() 
+{
+  int total = 0;
+  for (struct proc *p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->state == RUNNABLE) {
+      total += p->tickets_current;
+    }
+    release(&p->lock);
+  }
+  return total;
+}
+
+uint64 
+reset_tickets() 
+{
+  uint64 total = 0;
+  for (struct proc *p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->state == RUNNABLE) {
+      p->tickets_current = p->tickets_max;
+      total += p->tickets_current;
+    }
+    release(&p->lock);
+  }
+
+  return total;
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -446,15 +485,46 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-  
+
   c->proc = 0;
+
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
+    // calculate total tickets
+    uint64 tickets_total = ticket_total_count();
+
+    // if all tickets are used, reset all tickets
+    if (!tickets_total) 
+      tickets_total = reset_tickets();
+
+    // Choose a process to run.
+    uint64 draw = rand((uint64)tickets_total);
+    // printf("draw: %d\n", draw);
+    uint64 ticket_count = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
+
+      if(p->state != RUNNABLE) {
+        release(&p->lock);
+        continue;
+      }
+
+      ticket_count += p->tickets_current;
+      if (p->tickets_current == 0 ||
+          draw > ticket_count) {
+        release(&p->lock);
+        continue;
+      }
+
+
       if(p->state == RUNNABLE) {
+        // Decrease ticket count and increase time slice count
+        // for the chosen process
+        p->tickets_current--;
+        p->time_slices++;
+
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
@@ -465,8 +535,9 @@ scheduler(void)
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
+        release(&p->lock);
+        break;
       }
-      release(&p->lock);
     }
   }
 }
@@ -681,3 +752,55 @@ procdump(void)
     printf("\n");
   }
 }
+
+// Sets the maximum number of tickets the process can have
+// @param max_tickets the maximum number of tickets the process can have
+// @return 0 on success, -1 on error
+int
+settickets(int tickets_max)
+{
+  if(tickets_max < 1)
+    return -1;
+
+  struct proc *p = myproc();
+ 
+  acquire(&p->lock);
+  p->tickets_max = tickets_max;
+  // printf("settickets: pid %d, tickets_max %d\n", p->pid, p->tickets_max);
+  release(&p->lock);
+
+  return 0;
+}
+
+int
+getpinfo(uint64 addr)
+{
+  if (!addr) {
+    return -1;
+  }
+
+  struct proc *p;
+  struct pstat newpst;
+
+  int i = 0;
+  for (p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->state == UNUSED) {
+      newpst.inuse[i] = 0;
+    } else {
+      newpst.pid[i] = p->pid;
+      newpst.inuse[i] = 1;
+      newpst.tickets_max[i] = p->tickets_max;
+      newpst.tickets_current[i] = p->tickets_current;
+      newpst.time_slices[i] = p->time_slices;
+    }
+
+    release(&p->lock);
+    i++;
+  }
+
+  p = myproc();
+  copyout(p->pagetable, addr, (char *)&newpst, sizeof(newpst));
+
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..1686726 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,7 +91,10 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
-
+  int tickets_max;             // Maximum number of tickets
+  int tickets_current;         // Number of tickets available 
+  int time_slices;             // Number of tickets used
+  
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..44b6ebf
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,13 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int pid[NPROC]; // PID of each process
+  int inuse[NPROC]; // whether this slot of the process table is in use (1 or 0)
+  int tickets_max[NPROC]; // the maximum number of tickets this process can hold
+  int tickets_current[NPROC]; // the current number of tickets this process holds
+  int time_slices[NPROC]; // the number of time slices this process has been scheduled
+};
+
+#endif
\ No newline at end of file
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..73ba7f7
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,16 @@
+#include "types.h"
+
+volatile uint64 seed = 1;
+
+// Sets the seed for the random number generator.
+void srand(uint64 s) 
+{ 
+  seed = s; 
+}
+
+// @returns a random number between 0 and 1.
+uint64 rand(uint64 range) {
+  seed++;
+  uint64 a = seed * 15485863;
+  return ((a * a * a % 2038074743) * range) / 2038074743;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ce52e87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..da165ba 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..de1ed00 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int tickets_max;
+  argint(0, &tickets_max);
+  return settickets(tickets_max);
+}
+
+uint64
+sys_getpinfo(void) 
+{
+  uint64 pst; // user pointer to struct pstat
+  argaddr(0, &pst);
+  return getpinfo(pst);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..3176218
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,28 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+  struct pstat ps;
+  if (argc > 1) {
+    fprintf(2, "Usage: getpinfo");
+    exit(1);
+  }
+
+  if (getpinfo(&ps) < 0) {
+    fprintf(2, "getpinfo: failed to get process info");
+    exit(1);
+  } else {
+    printf("pid\t| In Use | Original Tickets | Current Tickets | Time Slices\n");
+    for (int i = 0; i < NPROC; i++) {
+      if (ps.inuse[i] == 1) {
+        printf("%d\t  %d\t   %d\t\t\t%d\t\t%d\n", 
+          ps.pid[i], ps.inuse[i], ps.tickets_max[i], ps.tickets_current[i], ps.time_slices[i]);
+      }
+    }    
+  }
+
+  exit(0);
+}
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..325a39f
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,29 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+  if (argc != 2) {
+    fprintf(2, "Usage: %s tickets\n", argv[0]);
+    exit(1);
+  }
+
+  if (settickets(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: failed to set tickets\n", argv[0]);
+    exit(1);
+  }
+  
+  int pid = fork();
+  if (pid < 0) {
+    fprintf(2, "%s: failed to fork\n", argv[0]);
+    exit(1);
+  } else if (pid == 0) {
+    // child process
+    printf("Process with pid %d initialized.\n", getpid());
+    printf("Original tickets set to %d\n", atoi(argv[1]));
+    while (1);
+  }
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..64b8048 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..21930eb 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
\ No newline at end of file
